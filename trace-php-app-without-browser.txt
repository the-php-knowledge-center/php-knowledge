* The whole idea here is to construct a pure cli way to trace a php web application without using a web browser.

* We might name this tool to be:
Exphlorer

* We can have a generic script, maybe named profile.php, the script will read different [profile_name].profile.json file.
* In a [profile-name].profile.json, we can make it look like:
{
   "document_root": "...",
   "script_name": "index.php",
   "Cookie": {
      "key1": "val1",
      "key2": "val2",
      ...
   }
}
* We can unify the curl requests with the following format:
curl -X GET -d "jim=123&ken=1984" http://127.0.0.1:8080/capture.php (then we can auto populate $_GET variables for php)
curl -X POST -d "..." http://127.0.0.1:8080/capture.php (then we can auto populate $_POST variables for php)
curl -X PUT -d "..." http://127.0.0.1:8080/capture.php (then we can auto populate $_PUT variables for php)
curl -X DELETE -d "..." http://127.0.0.1:8080/capture.php (then we can auto populate $_DELETE variables for php)

* In the php side, we can use:
$data = file_get_contents("php://input");
to read the incoming data from the curl request

* We can generate a phantom cli "curl like" request with a [profile_name].profile.json file
{
   "DOCUMENT_ROOT": "",
   "SCRIPT_NAME": "",
   "REQUEST_METHOD": "GET",
   "_COOKIE": {
      ...
   },
   "_GET": {
      "action": "logout"
   },
   "REMOTE_ADDR": "",
   "REMOTE_PORT": "",
   "SERVER_PROTOCOL": "HTTP/1.1"
}

We can auto compute:
1. PHP_SELF (same as SCRIPT_NAME)
2. REQUEST_URI
3. SCRIPT_FILENAME
4. HTTP_HOST
5. HTTP_COOKIE
...

One thing needs to make sure is about the session.
In CLI, we will need to pass the session id in the $_COOKIE array.
